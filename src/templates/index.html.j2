{% extends "base.html.j2" %}

{% block content %}
<div class="body" id="app" v-if="ready">

    <!-- LINKS -->
    <div class="static-tr links">

        <a class="link" v-for="(linkdict, linkname) in info.links" :href="linkdict.url" :key="linkname">
            <i :class="linkdict.icon"></i>
        </a>

    </div>

    <!-- EMAIL -->
    <a class="email-header link-unstyled" :href="info.links['Email'].url">
        <span class="email">
            <span class="name-around">me @</span>
            <span class="name">Clayton J Roberts</span>
            <span class="name-around">. com</span>
        </span>
    </a>


    <main>
        <div class="container-fluid" style="max-width: 50rem;">


            <!-- ME -->
            <div class="row align-items-center me pb-3">
                <div class="col-sm-auto" style = "text-align: center;">
                    <img class="me-portrait" :src="static_url + 'images/me.jpg'">
                    </img>
                </div>
                <div class="col">
                    <span class="me-objective" v-html="from_markdown_to_html(info.me.introduction)"></span>
                </div>
            </div>

            <!-- EXPERIENCE -->

            <h5 class="text-muted">Experience</h5>

            <!-- <div class="btn-group d-flex mb-3 overflow-auto">
                <a class="btn btn-light flex-fill" v-for="(expdict, expindex) in sortedexperience" v-scroll-to="{
                                        container: '#exps',
                                        el: '#exp' + expindex,
                                        easing: 'ease-in',
                                        force: true,
                                        cancelable: true,
                                    }" href="#">
                    {{! expdict.company.abbreviation ? expdict.company.abbreviation : expdict.company.name }}
                </a>
            </div> -->

            <div class="container-fluid scrolling-wrapper-flexbox card-deck" id="exps">

                <exp v-for="(expdict, expindex) in sortedexperience" :expdict="expdict" :expindex="expindex" :key="expindex">
                </exp>

            </div>



            <!-- SKILLS -->
            <div class="d-flex justify-content-between">
                <h5 class="text-muted skill-header">
                    Skills
                </h5>
                <div class="input-group">
                    <input type="text" class="form-control faf" style="font-weight: 900" placeholder="&#xf002;" aria-label="Skill Search" aria-describedby="basic-addon1" style="text-align: left;" v-model="filtersearch">
                </div>
                <h5 class="text-primary skill-header">
                    {{! _.size(listskill) }}
                </h5>
            </div>

            <div class="row m-0 justify-content-between">

                <skill v-for="(skilldict, skillkey) in listskill" :skilldict="skilldict" :skillkey="skillkey" :key="skillkey">
                </skill>

            </div>

    </main>

    <br />

    <footer style="text-align: right;">
        <small class="text-muted">
            Last-updated: {{! info["meta"]["last updated"] }}
        </small>
    </footer>

    <footer>
        {# <div class="links">
                <h4 class="links-list">
                    {% for linkdict in handler.application.info["links"] %}
                    <span class="link">
                        <a class="text-secondary"
                           :href="{{  linkdict['url']  }}"><i :class="{{  linkdict['url']  }}"></i>
                        </a>
                    </span>
                </h4>
            </div> #}
        <!-- <h1>Contact</h1> -->

        <div class="made-with">
            <i class="fas fa-hammer"></i>
            with
            <span class="text-primary"><i class="fas fa-heart"></i></span>
            by
            <a href="https://github.com/ClaymasterJ" class="text-muted">
                ClaymasterJ
            </a>
            {# <br /> #}
            {# <small>This website is still under development due to career obligations</small> #}
        </div>
    </footer>


</div>

</main>



</div>


{% end %}


{% block scripts %}
<script type="text/javascript">
    Vue.filter('from_markdown_to_html', function(val) {
        // Global filter function
        return mdconverter.makeHtml(val);
    });

    Vue.filter('reverse', function(value) {
        // slice to make a copy of array, then reverse the copy
        return value.slice().reverse();
    });


    var app = new Vue({
        el: '#app',
        // components: {
        //     VueMarkdown,
        // },
        data: function() {
            return {
                ...{
                    filtersearch: null,

                    selectedexperiance: null,
                    skilladditional: null,
                    static_url: "/static/",
                    info: null,
                    ready: false
                },
            }
        },
        methods: {
            from_markdown_to_html: function(x) {
                return mdconverter.makeHtml(x);
            },
            getInfo: function() {
                var self = this;

                $.getJSON('/api/info').then(
                    function(response) {
                        console.log(response);
                        self.info = response;
                        self.ready = true;
                    },
                    function(response) {
                        console.log(response)
                    }
                );
            },
            showskill: function(skilldict, skillkey) {
                // `this` points to the vm instance
                var self = this;

                if (self.filterexperiance) {
                    return (0 <= _.indexOf(self.filterexperiance, skillkey))
                }

                if (self.filtersearch) {
                    return (
                        skillkey.includes(self.filtersearch)
                        || (
                            skilldict.parent
                            && skilldict.parent.includes(self.filtersearch)
                        )
                    );
                }

                return true;


            }
        },
        filters: {
            from_markdown_to_html: function(x) {
                return mdconverter.makeHtml(x);
            }
        },
        beforeMount() {
            this.getInfo();
        },
        computed: {
            filterexperiance: function() {
                var self = this;
                // self.selectedexperiance = null;
                // console.log(self.selectedexperiance);
                if ( self.selectedexperiance ) {
                    console.log(self.sortedexperience[self.selectedexperiance].skillList);
                }

                return self.selectedexperiance != null ? self.sortedexperience[self.selectedexperiance].skillList : null;

            },
            sortedexperience: function() {
                var self = this;
                return _.reverse(_.sortBy(self.info.experience));
            },
            // dummy: function(skill) {
            //     console.log(skill);
            //     return true;
            // },
            listskill: function() {
                var self = this;
                var dict_skills = self.info.skills.list;

                // return _.fromPairs(_.sortBy(_.toPairs(_.pickBy(dict_skills, self.showskill)), ['level']));
                return _.fromPairs(_.toPairs(_.pickBy(dict_skills, self.showskill)));

            }
        }

    })

</script>
{% end %}
